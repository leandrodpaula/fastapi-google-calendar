from fastapi import APIRouter, Depends, HTTPException, status
from typing import Annotated # For Python 3.9+ type hinting for Depends

from src.domain.entities.event import Event as EventEntity
from src.application.use_cases.create_event_use_case import CreateEventUseCase
# We will define dependencies later for providing the use case
# from src.infrastructure.api.dependencies import get_create_event_use_case_dependency # Placeholder

# Define a Pydantic model for request body, excluding fields generated by server
from pydantic import BaseModel
import datetime
from typing import Optional, List # Added List
from src.domain.entities.participant import Participant # Added Participant

class EventCreationRequest(BaseModel):
    title: str
    description: Optional[str] = None
    start_datetime: datetime.datetime
    end_datetime: datetime.datetime
    participants: Optional[List[Participant]] = None # Added participants

    class Config:
        json_encoders = {
            datetime.datetime: lambda dt: dt.isoformat()
        }
        # Example for schema generation
        schema_extra = {
            "example": {
                "title": "API Launch Party",
                "description": "Celebrate the launch of our new API!",
                "start_datetime": "2024-09-01T18:00:00Z",
                "end_datetime": "2024-09-01T22:00:00Z"
            }
        }


router = APIRouter(
    prefix="/api/v1/events",
    tags=["Events"]
)

# This is a placeholder for the actual dependency injection mechanism
# which will be set up more robustly later.
# For now, to make the file syntactically correct and testable in isolation (if needed),
# we might define a dummy provider or rely on a global/app-level setup.
# The actual `get_create_event_use_case` will be defined in a dependencies module.

# Placeholder for dependency injection - this will be refined
# For now, the endpoint will expect the use case to be passed by FastAPI's Depends
# The actual provider for CreateEventUseCase will be set up in main.py or a dedicated dependencies module

@router.post("/", response_model=EventEntity, status_code=status.HTTP_201_CREATED)
async def create_event_endpoint(
    event_data: EventCreationRequest,
    # use_case: CreateEventUseCase = Depends(get_create_event_use_case_dependency) # Correct way with DI
    # For now, let's assume a DI setup later, and type hint for clarity
    use_case: Annotated[CreateEventUseCase, Depends()] # Placeholder for actual dependency
):
    """
    Create a new event.
    The event is first created in Google Calendar, then persisted locally.
    """
    try:
        # Convert request model to domain entity (EventEntity)
        # id, google_event_id, created_at, updated_at will be set by use_case or repository
        event_to_create = EventEntity(
            title=event_data.title,
            description=event_data.description,
            start_datetime=event_data.start_datetime,
            end_datetime=event_data.end_datetime,
            participants=event_data.participants # Added participants
        )
        created_event = await use_case.execute(event_to_create)
        return created_event
    except Exception as e:
        # Log the exception e
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An unexpected error occurred: {str(e)}"
        )

# Example of how get_create_event_use_case might look (to be moved to dependencies.py)
# from src.infrastructure.persistence.mongo_event_repository import MongoEventRepository
# from src.infrastructure.external.google_calendar_adapter import GoogleCalendarAdapter
# from src.domain.repositories.event_repository import EventRepository
# from src.application.services.google_calendar_service import GoogleCalendarService

# def get_event_repository() -> EventRepository:
#     # This would actually connect to MongoDB and return an instance
#     return MongoEventRepository(database_url="mongodb://localhost:27017", database_name="eventsdb")

# def get_google_calendar_service() -> GoogleCalendarService:
#     # This would be configured with API keys etc.
#     return GoogleCalendarAdapter(api_key="YOUR_GOOGLE_API_KEY")

# def get_create_event_use_case(
#     repo: EventRepository = Depends(get_event_repository),
#     calendar_service: GoogleCalendarService = Depends(get_google_calendar_service)
# ) -> CreateEventUseCase:
#     return CreateEventUseCase(event_repository=repo, google_calendar_service=calendar_service)
#
#
# echo "Event endpoint created in src/infrastructure/api/v1/endpoints/events.py"
